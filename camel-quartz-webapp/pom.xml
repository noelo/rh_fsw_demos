<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<version>0.0.1-SNAPSHOT</version>
	<groupId>com.redhat.gps.demo</groupId>
	<artifactId>camel-quartz-webapp</artifactId>
	<packaging>war</packaging>

<!-- 	<properties>
		Explicitly declaring the source encoding eliminates the following 
			message:
		[WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent!
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		Define the version of JBoss' Java EE 6 APIs we want to import. Any 
			dependencies from org.jboss.spec will have their version defined by this 
			BOM
		Certified version of the JBoss EAP components we want to use
		<javaee6.web.spec.version>3.0.2.Final-redhat-7</javaee6.web.spec.version>
		Alternatively, comment out the above line, and un-comment the line 
			below to use version 2.0.0.Beta1 which is based on community built dependencies. 
			You can actually use this stack with any version of JBoss AS that implements 
			the Java EE 6 web profile
		<javaee6.web.spec.version>2.0.0.Final</javaee6.web.spec.version>
	</properties> -->

<!-- 	<dependencyManagement>
		<dependencies>
			JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
				as the JBoss stack of the Java EE Web Profile 6 APIs)
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>${javaee6.web.spec.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement> -->

	<dependencies>

 		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<version>1.0.2.Final-redhat-1</version>
			<scope>provided</scope>
		</dependency> 

		<!-- camel -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
			<version>2.10.0.redhat-60024</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring</artifactId>
			<version>2.10.0.redhat-60024</version>
		</dependency>
<!-- 		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-servlet</artifactId>
			<version>2.10.0.redhat-60024</version>
		</dependency> -->

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-quartz</artifactId>
			<version>2.10.0.redhat-60024</version>
		</dependency>

		<!-- we need spring web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.6</version>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- <plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					Java EE 6 doesn't require web.xml, Maven needs to catch up!
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin> -->
		</plugins>
	</build>

</project>
